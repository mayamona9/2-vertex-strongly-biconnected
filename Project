import networkx as nx
from networkx.algorithms.components import strongly_connected_components
from networkx.algorithms.bridges import articulation_points

def is_2vertex_strongly_biconnected(G):
    # Step 1: Check if the graph is strongly connected
    scc = list(strongly_connected_components(G))
    if len(scc) > 1:
        return False

    # Step 2: Convert directed graph to undirected graph
    UG = G.to_undirected()

    # Step 3: Check if the undirected graph has articulation points
    articulation_points_list = list(articulation_points(UG))
    if articulation_points_list:
        return False

    return True

# Example of testing with SNAP data
# Let's create a sample directed graph
G = nx.DiGraph()
edges = [(0, 1), (1, 2), (2, 0), (1, 3), (3, 4), (4, 1)]
G.add_edges_from(edges)

# Check if the graph is 2-vertex strongly biconnected
result = is_2vertex_strongly_biconnected(G)
print("Is the graph 2-vertex strongly biconnected?", result)
